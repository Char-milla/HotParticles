--[[============================================================
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

export !import "basic"
export !import "string"
export io   :: !import "io"
export math :: !import "math"

export love :: !import "love"
export LD :: love.data
export LE :: love.event
export LF :: love.filesystem
export LG :: love.graphics
export LK :: love.keyboard
export LT :: love.timer

export !self
export !load "panel"
export !load "workspace"

!run {
	!import "compiler"
	compile("conf.gloa")
}



export fontSmall:  LG.Font  = NULL
export fontNormal: LG.Font  = NULL

export imageChecker:  LG.Image = NULL
export imageGradient: LG.Image = NULL
export imageLight:    LG.Image = NULL
export imageRainbow:  LG.Image = NULL

export openProjects: []Project
export currentProjectIndex = 1

export actionText      = ""
export actionTextTime  = -9999.00
export messageText     = ""
export messageTextTime = -9999.00

export isPositioningParticles = false
export scheduleSaveWorkspace  = false

export zoomLevel = 0
export zoom      = 1.0

-- Saved settings.
export showStats = true



export System :: struct {
	colors: []float,
	blendMode       = LG.BlendMode.ALPHA,
	useCustomOffset = false,
	particles: LG.ParticleSystem = NULL,

	!call :: () -> System {
		local system: System

		local ps = LG.newParticleSystem(imageLight)
		ps.start!()
		system.particles = ps

		return system
	},
}

export Project :: struct {
	systemIndex = 1,
	systems: []System,

	bgColorR = .05,
	bgColorG = .05,
	bgColorB = .05,
}



export addNewSystem :: (project:Project) {
	local system = System()
	system.colors    = {1,1,1,0, 1,1,1,1, 1,1,1,.5, 1,1,1,0}
	system.blendMode = LG.BlendMode.ADD
	insert(project.systems, system)

	local ps = system.particles
	ps.setEmissionRate!(20)
	ps.setColors!(system.colors)
	ps.setDirection!(-math.TAU/4)
	ps.setSpread!(.05*math.TAU)
	ps.setParticleLifetime!(1.8, 2.2)
	ps.setSpeed!(90, 100)

	if project.systems[2] ~= NULL {
		local x, y = project.systems[1].particles.getPosition!()
		ps.setPosition!(x, y)
	}
}

export addNewProject :: () {
	local project: Project
	insert(openProjects, project)

	addNewSystem(project)

	currentProjectIndex = #openProjects
}

export onLoad :: (args:[]string, argsRaw:[]string) {
	io.disableBuffering(io.STDOUT)
	io.disableBuffering(io.STDERR)

	LF.setIdentity("Hot Particles")

	fontSmall  = LG.newFont(10)
	fontNormal = LG.newFont(12)

	imageChecker  = LG.newImage("gfx/checker.png") ; imageChecker.setWrap!(LG.WrapMode.REPEAT, LG.WrapMode.REPEAT)
	imageGradient = LG.newImage("gfx/gradient.png")
	imageLight    = LG.newImage("gfx/light.png")
	imageRainbow  = LG.newImage("gfx/rainbow.png")

	local ok, gotError, projects = loadWorkspace()
	if ok {
		openProjects        = projects
		currentProjectIndex = 1
	} else {
		if gotError {
			messageText     = "Could not load previous workspace"
			messageTextTime = LT.getTime()
		}
		addNewProject()
	}
}



export onKeyPressed :: (key:string, scancode:string, isRepeat:bool) {
	if love.mouse.isGrabbed()  return
	if key == {
		case "escape": LE.quit(0)
		case "f1":     showStats = not showStats ; scheduleSaveWorkspace = true
		case "f10":    if LK.isDown("lctrl","rctrl")  LE.restart()
	}
}

export onMousePressed :: (mx,my:int, mbutton:int, isTouch:bool, presses:int) {
	if mbutton == 1 {
		if mx < PANEL_WIDTH {
			pressedPanelThisFrame = true
		} else {
			isPositioningParticles = true
			onMouseMoved(mx,my, 0,0, isTouch)
		}
		love.mouse.setGrabbed(true)
	}
}
export onMouseMoved :: (mx,my:int, dx,dy:int, isTouch:bool) {
	if isPositioningParticles {
		local project = openProjects[currentProjectIndex]

		local x = (mx - (LG.getWidth()+PANEL_WIDTH)/2) / zoom
		local y = (my - (LG.getHeight()           )/2) / zoom

		for system: project.systems {
			system.particles.moveTo!(x, y)
		}
	}
}
export onMouseReleased :: (mx,my:int, mbutton:int, isTouch:bool, presses:int) {
	if mbutton == 1 {
		if draggedPanelItem {
			draggedPanelItem      = 0
			draggedPanelSubItem   = 0
			scheduleSaveWorkspace = true
		}
		isPositioningParticles = false
		love.mouse.setGrabbed(false)
	}
}
export onMouseWheel :: (dx,dy:int) {
	zoomLevel    = math.clamp(zoomLevel+dy, -4, 6)
	zoom         = 2^zoomLevel

	actionText     = format("Zoom: %d%%", zoom*100)
	actionTextTime = LT.getTime()
}



export onUpdate :: (dt:float) {
	local project       = openProjects[currentProjectIndex]
	local systemsActive = false

	for system: project.systems {
		local ps = system.particles
		ps.update!(dt)

		systemsActive = systemsActive or ps.isActive!() or ps.getCount!() > 0
	}

	if not systemsActive {
		for system: project.systems
			system.particles.start!()
	}

	if scheduleSaveWorkspace  saveWorkspace() -- @UX: Maybe wait a little while before saving?
}



export onDraw :: () {
	local ww, wh  = LG.getDimensions()
	local project = openProjects[currentProjectIndex]

	LG.reset()
	LG.clear(project.bgColorR, project.bgColorG, project.bgColorB)

	-- Particles.
	LG.translate((ww+PANEL_WIDTH)/2, wh/2)
	LG.scale(zoom)

	for system: project.systems {
		LG.setBlendMode(system.blendMode)
		LG.draw(system.particles)
	}
	LG.setBlendMode(LG.BlendMode.ALPHA)

	if isPositioningParticles {
		local mx, my = love.mouse.getPosition()
		local x,  y  = LG.inverseTransformPoint(mx, my)
		LG.setColor(1, 0, 0)
		LG.line(x-50, y, x+50, y)
		LG.line(x, y-50, x, y+50)
	}

	LG.reset()
	LG.setFont(fontNormal)

	-- Stats.
	if showStats {
		local fontH = fontNormal.getHeight!()

		local x = PANEL_WIDTH+5
		local y = 5

		if .30*project.bgColorR+.55*project.bgColorG+.15*project.bgColorB < .25
			LG.setColor(1, 1, 1, .7)
		else
			LG.setColor(0, 0, 0, .7)

		local particleCountTotal = 0

		local drawStatsLine = [x,y,fontH] (s:string, ...:int|float|string) {
			LG.print(format(s, ...), x, y)
			y += fontH+1
		}

		for system: project.systems {
			local count         = system.particles.getCount!()
			particleCountTotal += count
			drawStatsLine("%d_ParticleCount: %d", itIndex, count)
		}

		drawStatsLine("ParticleCountTotal: %d", particleCountTotal)
		drawStatsLine("(hide this with F1)")
	}

	-- Panel.
	drawPanel()

	-- HUD texts.
	local visibility = 1 - (LT.getTime() - messageTextTime) / 8.00
	if visibility > 0 {
		local x = math.round((ww-fontNormal.getWidth!(messageText))/2)
		local y = math.round(wh/2-fontNormal.getHeight!())
		local a = visibility^.5
		LG.setColor(0, 0, 0, a)
		LG.print(messageText, x+1, y+1)
		LG.setColor(1, 1, 1, a)
		LG.print(messageText, x, y)
	}

	visibility = 1 - (LT.getTime() - actionTextTime) / 0.60
	if visibility > 0 {
		local x = math.round((ww-fontNormal.getWidth!(actionText))/2)
		local y = math.round(wh/2)
		local a = visibility^.5
		LG.setColor(0, 0, 0, a)
		LG.print(actionText, x+1, y+1)
		LG.setColor(1, 1, 1, a)
		LG.print(actionText, x, y)
	}
}



export main :: () {
	!import "utils"
	local loveTable: table = !foreign lua "love"

	loveTable.load          = wrapFunctionInGloaErrorHandler(onLoad)
	loveTable.keypressed    = wrapFunctionInGloaErrorHandler(onKeyPressed)
	loveTable.mousepressed  = wrapFunctionInGloaErrorHandler(onMousePressed)
	loveTable.mousemoved    = wrapFunctionInGloaErrorHandler(onMouseMoved)
	loveTable.mousereleased = wrapFunctionInGloaErrorHandler(onMouseReleased)
	loveTable.wheelmoved    = wrapFunctionInGloaErrorHandler(onMouseWheel)
	loveTable.update        = wrapFunctionInGloaErrorHandler(onUpdate)
	loveTable.draw          = wrapFunctionInGloaErrorHandler(onDraw)
	loveTable.errhand       = nil
	loveTable.errorhandler  = nil
}


