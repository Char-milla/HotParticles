--[[============================================================
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

export !import "basic"
export !import "color"
export !import "string"
export io   :: !import "io"
export math :: !import "math"

export love :: !import "love"
export LD :: love.data
export LE :: love.event
export LF :: love.filesystem
export LG :: love.graphics
export LK :: love.keyboard
export LT :: love.timer

export !self
export !load "misc"
export !load "panel"
export !load "workspace"

!run {
	!import "compiler"
	compile("conf.gloa")
}



export fontSmall:  LG.Font  = NULL
export fontNormal: LG.Font  = NULL
export fontLarge:  LG.Font  = NULL

export imageChecker:  LG.Image = NULL
export imageGradient: LG.Image = NULL
export imageRainbow:  LG.Image = NULL

export particleImages: struct { !key:string, !value:LG.Image }

export canvasGui:   LG.Canvas = NULL
export canvasWorld: LG.Canvas = NULL

export openProjects: []Project
export currentProjectIndex = 1

export actionText      = ""
export actionTextTime  = -9999.00
export messageText     = ""
export messageTextTime = -9999.00

export pressedAnythingThisFrame = false
export isPositioningParticles   = false
export scheduleSaveWorkspace    = false
export scheduleRecreateCanvases = false

export keysPressedThisFrame: struct { !key:LK.KeyConstant, !value:bool }

-- Saved settings.
export showProjectSettings = true
export showStats           = true
export showPanelNumbers    = true



export Project :: struct {
	systemIndex = 1,

	zoomLevel  = 0,
	zoom       = 1.0,
	zoomSource = 1.0,
	zoomTarget = 1.0,

	-- Saved stuff:

	systems: []System,

	bgColorH = .0,
	bgColorS = .0,
	bgColorV = .15,

	pixelateWorld    = false,
	pixelateTextures = false,
}

export System :: struct {
	particles: LG.ParticleSystem = NULL,

	colors: []float, -- {h1,s1,v1,a1,...}
	blendMode = LG.BlendMode.ALPHA,

	useCustomOffset = false,

	!call :: () -> System {
		local system: System

		local ps = LG.newParticleSystem(particleImages.moon)
		ps.start!()
		system.particles = ps

		return system
	},
}



export updateParticleColors :: (ps:LG.ParticleSystem, colors:[]float) {
	local colorsRgba: []float

	for i = 1, #colors, 4 {
		local r, g, b = hsvToRgb(colors[i], colors[i+1], colors[i+2])
		insert(colorsRgba, r)
		insert(colorsRgba, g)
		insert(colorsRgba, b)
		insert(colorsRgba, colors[i+3])
	}

	ps.setColors!(colorsRgba)
}

export addNewSystem :: (project:Project) {
	local system = System()
	system.colors    = {0,0,1,0, 0,0,1,1, 0,0,1,.5, 0,0,1,0}
	system.blendMode = LG.BlendMode.ADD
	insert(project.systems, system)

	local ps = system.particles
	ps.setEmissionRate!(20)
	ps.setDirection!(-math.TAU/4)
	ps.setSpread!(.05*math.TAU)
	ps.setParticleLifetime!(1.8, 2.2)
	ps.setSpeed!(90, 100)
	updateParticleColors(ps, system.colors)

	if project.systems[2] ~= NULL {
		local x, y = project.systems[1].particles.getPosition!()
		ps.setPosition!(x, y)
	}
}

export addNewProject :: () {
	local project: Project
	insert(openProjects, project)

	addNewSystem(project)

	currentProjectIndex = #openProjects
}

export createCanvases :: () {
	local ww, wh = LG.getDimensions()

	if canvasGui ~= NULL {
		canvasGui  .release!()
		canvasWorld.release!()
	}

	local SETTINGS: LG.CanvasSettings : {msaa=4}
	canvasGui   = LG.newCanvas(ww,                          wh, SETTINGS)
	canvasWorld = LG.newCanvas(math.max(ww-PANEL_WIDTH, 1), wh)

	if openProjects[currentProjectIndex].pixelateWorld {
		canvasWorld.setFilter!(LG.FilterMode.NEAREST, LG.FilterMode.NEAREST)
	}
}

export updateParticleImageFilters :: () {
	local filter = openProjects[currentProjectIndex].pixelateTextures ? LG.FilterMode.NEAREST : LG.FilterMode.LINEAR

	for cast(table) particleImages {
		LG.Image.setFilter(cast(LG.Image)it, filter, filter)
	}
}

export onLoad :: (args:[]string, argsRaw:[]string) {
	io.disableBuffering(io.STDOUT)
	io.disableBuffering(io.STDERR)

	LF.setIdentity("Hot Particles")
	LK.setKeyRepeat(true)

	fontSmall  = LG.newFont(10)
	fontNormal = LG.newFont(12)
	fontLarge  = LG.newFont(20)

	imageChecker  = LG.newImage("gfx/checker.png") ; imageChecker.setWrap!(LG.WrapMode.REPEAT, LG.WrapMode.REPEAT)
	imageGradient = LG.newImage("gfx/gradient.png")
	imageRainbow  = LG.newImage("gfx/rainbow.png")

	particleImages.light = LG.newImage("gfx/light.png")
	particleImages.moon  = LG.newImage("gfx/moon.png")

	local ok, gotError, projects = loadWorkspace()
	if ok {
		openProjects        = projects
		currentProjectIndex = 1
	} else {
		if gotError {
			messageText     = "Could not load previous workspace"
			messageTextTime = LT.getTime()
		}
		addNewProject()
	}

	createCanvases()
	updateParticleImageFilters()
}



export onKeyPressed :: (key:LK.KeyConstant, scancode:LK.Scancode, isRepeat:bool) {
	if love.mouse.isGrabbed()  return

	keysPressedThisFrame[key] = true
	local mod                 = getModifierKey()

	if key == {
		case "r":      for openProjects[currentProjectIndex].systems { it.particles.reset!() ; it.particles.start!() }
		case "escape": if contextMenu ~= NULL  contextMenu = NULL  else  LE.quit(0)
		case "f1":     showStats        = not showStats        ; scheduleSaveWorkspace = true
		case "f2":     showPanelNumbers = not showPanelNumbers ; scheduleSaveWorkspace = true
		case "f10":    if mod == ModifierKey.C  LE.restart()
	}
}

export onMousePressed :: (mx,my:int, mbutton:int, isTouch:bool, presses:int) {
	pressedAnythingThisFrame = true

	if love.mouse.isGrabbed()  return

	if mx < PANEL_WIDTH or isInsideContextMenu(mx, my)  pressedOnPanelWithMouseButton = mbutton

	if mbutton == 1 {
		if not pressedOnPanelWithMouseButton {
			isPositioningParticles = true
			onMouseMoved(mx,my, 0,0, isTouch)
		}
		love.mouse.setGrabbed(true)
	}
}
export onMouseMoved :: (mx,my:int, dx,dy:int, isTouch:bool) {
	if isPositioningParticles {
		local project = openProjects[currentProjectIndex]

		local x = (mx - (LG.getWidth()+PANEL_WIDTH)/2) / project.zoom
		local y = (my - (LG.getHeight()           )/2) / project.zoom

		for system: project.systems {
			system.particles.moveTo!(x, y)
		}
	}
}
export onMouseReleased :: (mx,my:int, mbutton:int, isTouch:bool, presses:int) {
	if mbutton == 1 {
		if draggedPanelItem {
			draggedPanelItem      = 0
			draggedPanelSubItem   = 0
			scheduleSaveWorkspace = true
		}
		isPositioningParticles = false
		love.mouse.setGrabbed(false)
	}
}
export onMouseWheel :: (dx,dy:int) {
	if love.mouse.isGrabbed()  return

	if love.mouse.getX() < PANEL_WIDTH {
		panelScrollSource = panelScroll
		panelScrollTarget = math.min(panelScrollTarget+50*dy, 0)

	} else {
		local project = openProjects[currentProjectIndex]

		project.zoomLevel  = math.clamp(project.zoomLevel+dy, (project.pixelateWorld ? -1 : -4), 6)
		project.zoomSource = project.zoom
		project.zoomTarget = 2^project.zoomLevel

		actionText     = format("Zoom: %d%%", project.zoomTarget*100)
		actionTextTime = LT.getTime()
	}
}



export onUpdate :: (dt:float) {
	local project       = openProjects[currentProjectIndex]
	local systemsActive = false

	for system: project.systems {
		local ps = system.particles
		ps.update!(dt)

		systemsActive = systemsActive or ps.isActive!() or ps.getCount!() > 0
	}

	if not systemsActive {
		for system: project.systems
			system.particles.start!()
	}

	if scheduleSaveWorkspace  saveWorkspace() -- @UX: Maybe wait a little while before saving?

	project.zoom = math.moveTowards(
		project.zoom,
		project.zoomTarget,
		math.abs(project.zoomTarget - project.zoomSource) * dt / 0.05
	)
	panelScroll = math.moveTowards(
		panelScroll,
		panelScrollTarget,
		math.abs(panelScrollTarget - panelScrollSource) * dt / 0.05
	)

	if scheduleRecreateCanvases  createCanvases()
}



export onDraw :: () {
	local ww, wh  = LG.getDimensions()
	local project = openProjects[currentProjectIndex]

	LG.reset()

	-- GUI.
	do {
		LG.setCanvas(canvasGui)
		LG.clear()

		LG.setFont(fontNormal)

		-- Stats.
		if showStats {
			local fontH = fontNormal.getHeight!()

			local x = PANEL_WIDTH+5
			local y = 5

			local r, g, b          = hsvToRgb(project.bgColorH, project.bgColorS, project.bgColorV)
			local _, _, brightness = rgbToHsp(r, g, b)
			if brightness < .5
				LG.setColor(1, 1, 1, .7)
			else
				LG.setColor(0, 0, 0, .7)

			local particleCountTotal = 0

			local drawStatsLine = [x,y,fontH] (s:string, ...:int|float|string) {
				LG.print(format(s, ...), x, y)
				y += fontH+1
			}

			for system: project.systems {
				local count         = system.particles.getCount!()
				particleCountTotal += count
				drawStatsLine("%d_ParticleCount: %d", itIndex, count)
			}

			drawStatsLine("ParticleCountTotal: %d", particleCountTotal)
			drawStatsLine("(hide this with F1)")
		}

		-- Panel.
		drawPanel()

		-- HUD texts.
		LG.origin()
		LG.setFont(fontLarge)

		local visibility = 1 - (LT.getTime() - messageTextTime) / 8.00
		if visibility > 0 {
			local x = math.round((ww+PANEL_WIDTH-fontLarge.getWidth!(messageText))/2)
			local y = math.round(.1*wh)
			local a = visibility^.5
			LG.setColor(0, 0, 0, a)
			LG.print(messageText, x+1, y+1)
			LG.setColor(1, 1, 1, a)
			LG.print(messageText, x, y)
		}

		visibility = 1 - (LT.getTime() - actionTextTime) / 0.60
		if visibility > 0 {
			local x = math.round((ww+PANEL_WIDTH-fontLarge.getWidth!(actionText))/2)
			local y = math.round(.1*wh+fontLarge.getHeight!())
			local a = visibility^.5
			LG.setColor(0, 0, 0, a)
			LG.print(actionText, x+1, y+1)
			LG.setColor(1, 1, 1, a)
			LG.print(actionText, x, y)
		}

		-- Mouse stuff.
		--[[
		local mx, my = love.mouse.getPosition()
		if isPositioningParticles {
			LG.setColor(1, 0, 0)
			LG.line(mx-50, my, mx+50, my)
			LG.line(mx, my-50, mx, my+50)
		}
		--]]

		LG.reset()
	}

	-- World.
	do {
		LG.setCanvas(canvasWorld)

		local r, g, b = hsvToRgb(project.bgColorH, project.bgColorS, project.bgColorV)
		LG.clear(r, g, b)

		LG.translate((ww-PANEL_WIDTH)/2, wh/2)
		if not project.pixelateWorld  LG.scale(project.zoom)

		for system: project.systems {
			LG.setBlendMode(system.blendMode)
			LG.draw(system.particles)
		}
		LG.setBlendMode(LG.BlendMode.ALPHA)

		LG.reset()
	}

	-- Put stuff on the screen!
	LG.clear()
	LG.setBlendMode(LG.BlendMode.ALPHA, LG.BlendAlphaMode.PREMULTIPLIED)

	if project.pixelateWorld {
		LG.draw(canvasWorld, (ww+PANEL_WIDTH)/2,wh/2, 0, project.zoom,project.zoom, (ww-PANEL_WIDTH)/2, wh/2)
	} else {
		LG.draw(canvasWorld, PANEL_WIDTH,0)
	}

	LG.draw(canvasGui)

	-- We have to reset these here instead of in onUpdate() as a bunch of update stuff happen while we draw things.
	keysPressedThisFrame     = {}
	pressedAnythingThisFrame = false
}



export onResize :: (w,h:int) {
	createCanvases()
}



export main :: () {
	!import "utils"
	local loveTable: table = !foreign lua "love"

	loveTable.load          = wrapFunctionInGloaErrorHandler(onLoad)
	loveTable.keypressed    = wrapFunctionInGloaErrorHandler(onKeyPressed)
	loveTable.mousepressed  = wrapFunctionInGloaErrorHandler(onMousePressed)
	loveTable.mousemoved    = wrapFunctionInGloaErrorHandler(onMouseMoved)
	loveTable.mousereleased = wrapFunctionInGloaErrorHandler(onMouseReleased)
	loveTable.wheelmoved    = wrapFunctionInGloaErrorHandler(onMouseWheel)
	loveTable.update        = wrapFunctionInGloaErrorHandler(onUpdate)
	loveTable.draw          = wrapFunctionInGloaErrorHandler(onDraw)
	loveTable.resize        = wrapFunctionInGloaErrorHandler(onResize)
	loveTable.errhand       = nil
	loveTable.errorhandler  = nil
}


