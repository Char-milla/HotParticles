--[[============================================================
--=
--=  GUI setup
--=
--=-------------------------------------------------------------
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

export setupGuiFrames :: () {
	guiState.frames = {
		guiState.frame!({ name="main", width=MAIN_PANEL_WIDTH,
			guiState.tabs!({ name="projects", specialLastTab=true }),

			guiState.buttons!({ name="saveOpenBar",
				buttons = {
					{label="save"},
					{label="save as..."},
					{label="open..."},
					{label="hide settings"},
				},
			}),

			guiState.vbox!({ name="projectSettings",
				guiState.separator!({ thick=false }),

				guiState.section!({ label="Pixelate",
					guiState.hbox!({
						guiState.checkbox!({ name="pixelateWorld",    label="world"    }),
						guiState.checkbox!({ name="pixelateTextures", label="textures" }),
					}),
				}),

				guiState.separator!({ thick=false }),

				guiState.section!({ label="Background",
					guiState.hbox!({
						guiState.color!({ name="bgColor", alpha=false, weight=1 }),
						guiState.colorPreview!({ linkColors={"bgColor"} }),
					}),
				}),

				guiState.separator!({ thick=false }),

				guiState.section!({ label="EmitterMovem.",
					guiState.radio!({ name="emitterMovement",
						buttons = {
							{value=Movement.NONE,      label="none",      tooltip="No movement"},
							{value=Movement.CIRCLE,    label="circle",    tooltip="Circle, or back and forth"},
							{value=Movement.EIGHT,     label="eight",     tooltip="Numeral eight"},
							{value=Movement.IRREGULAR, label="irregular", tooltip="Irregular movement"},
						}
					}),
					guiState.hbox!({
						guiState.vbox!({ weight=1,
							guiState.slider!({ name="emitterMovementSx", labelLeft="scale x", min=0, max=2, readoutMulti=100, readout="%d%%" }),
							guiState.slider!({ name="emitterMovementSy", labelLeft="scale y", min=0, max=2, readoutMulti=100, readout="%d%%" }),
						}),
						guiState.slider!({ name="emitterMovementSpeed", labelLeft="speed", inset=40, min=-8, max=8, readoutMulti=100, readout="%d%%", weight=2 }),
					}),
				}),
			}),

			guiState.separator!({ thick=true }),

			guiState.vbox!({ name="system",
				guiState.section!({ label="ParticleSystem",
					guiState.tabs!({ name="systems", specialLastTab=true }),
				}),

				guiState.scrollable!({ height=0,--[[Remaining height.]]
					guiState.section!({ label="Texture",
						guiState.radio!({ name="texture" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="InsertMode",
						guiState.radio!({ name="insertMode",
							buttons = {
								{value=LG.ParticleInsertMode.TOP,    label="top"},
								{value=LG.ParticleInsertMode.BOTTOM, label="bottom"},
								{value=LG.ParticleInsertMode.RANDOM, label="random"},
							}
						}),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Lifetime",
						guiState.slider!({ name="emitterLifetime",     labelLeft="emitter",     min=0, max=20, readout="%.2f sec", readoutZero="∞" }),
						guiState.slider!({ name="particleLifetimeMin", labelLeft="paricle min", min=0, max=20, readout="%.2f sec" }),
						guiState.slider!({ name="particleLifetimeMax", labelLeft="paricle max", min=0, max=20, readout="%.2f sec" }),
					}),

					guiState.separator!({ thick=true }),

					guiState.section!({ label="SpawnRate",
						guiState.slider!({ name="emissionRate", min=0, max=1000, readout="%.1f / sec" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Area",
						guiState.radio!({ name="areaDistribution",
							buttons = {
								{value=LG.AreaSpreadDistribution.NONE,             label="none",    tooltip="None"},
								{value=LG.AreaSpreadDistribution.NORMAL,           label="norm",    tooltip="Normal"},
								{value=LG.AreaSpreadDistribution.ELLIPSE,          label="ellip",   tooltip="Ellipse"},
								{value=LG.AreaSpreadDistribution.UNIFORM,          label="rect",    tooltip="Rectangle (uniform)"},
								{value=LG.AreaSpreadDistribution.BORDER_ELLIPSE,   label="b.ellip", tooltip="Border ellipse"},
								{value=LG.AreaSpreadDistribution.BORDER_RECTANGLE, label="b.rect",  tooltip="Border rectangle"},
							},
						}),
						guiState.hbox!({ name="areaParams", active=false,
							guiState.direction!({ name="areaAngle", labelLeft="angle" }),
							guiState.vbox!({ weight=1,
								guiState.slider!({ name="areaDx", labelLeft="dx", inset=30, min=0, max=1000, readout="%d" }),
								guiState.slider!({ name="areaDy", labelLeft="dy", inset=30, min=0, max=1000, readout="%d" }),
								guiState.checkbox!({ name="areaRelative", label="direction relative to center", inset=14, weight=1 }),
							}),
						}),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Direction",
						guiState.hbox!({
							guiState.direction!({ name="direction", linkSpread="directionSpread" }),
							guiState.slider!({ name="directionSpread", labelLeft="spread", min=0, max=math.TAU, readoutMulti=360/math.TAU, readout="%d°", weight=1, inset=50 }),
						}),
					}),

					guiState.separator!({ thick=true }),

					guiState.section!({ label="Speed",
						guiState.slider!({ name="speedMin", labelLeft="min", min=-2000, max=2000, readout="%d / sec" }),
						guiState.slider!({ name="speedMax", labelLeft="max", min=-2000, max=2000, readout="%d / sec" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="AccLinear",
						guiState.slider!({ name="accLinearXmin", labelLeft="xmin", min=-10000, max=10000, readout="%d / sec²" }),
						guiState.slider!({ name="accLinearXmax", labelLeft="xmax", min=-10000, max=10000, readout="%d / sec²" }),
						guiState.slider!({ name="accLinearYmin", labelLeft="ymin", min=-10000, max=10000, readout="%d / sec²" }),
						guiState.slider!({ name="accLinearYmax", labelLeft="ymax", min=-10000, max=10000, readout="%d / sec²" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="AccRadial",
						guiState.slider!({ name="radialAccelerationMin", labelLeft="min", min=-20000, max=20000, readout="%d / sec²" }),
						guiState.slider!({ name="radialAccelerationMax", labelLeft="max", min=-20000, max=20000, readout="%d / sec²" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="AccTangent",
						guiState.slider!({ name="tangentialAccelerationMin", labelLeft="min", min=-20000, max=20000, readout="%d / sec²" }),
						guiState.slider!({ name="tangentialAccelerationMax", labelLeft="max", min=-20000, max=20000, readout="%d / sec²" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Damping",
						guiState.slider!({ name="linearDampingMin", labelLeft="min", min=-50, max=50, readout="%.2f" }),
						guiState.slider!({ name="linearDampingMax", labelLeft="max", min=-50, max=50, readout="%.2f" }),
					}),

					guiState.separator!({ thick=true }),

					guiState.section!({ label="Rotation",
						guiState.hbox!({
							guiState.direction!({ name="rotationMin", linkOther="rotationMax", labelLeft="min/max" }),
							guiState.direction!({ name="rotationMax", linkOther="rotationMin", }),
							guiState.checkbox!({ name="rotationRelative", label="relative", inset=10 }),
						}),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Spin",
						guiState.slider!({ name="spinMin", labelLeft="at start", min=-8*math.TAU, max=8*math.TAU, readoutMulti=1/math.TAU, readout="%.2f turns / sec" }),
						guiState.slider!({ name="spinMax", labelLeft="at end",   min=-8*math.TAU, max=8*math.TAU, readoutMulti=1/math.TAU, readout="%.2f turns / sec" }),
						guiState.slider!({ name="spinVariation", labelLeft="variation", min=0, max=1, readoutMulti=100, readout="%d%%" }),
					}),

					guiState.separator!({ thick=true }),

					guiState.section!({ name="sizes", label="Size",
						guiState.hbox!({ name="sizeContainer1", data=1, labelLeft="#1",
							guiState.buttons!({ data=1, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size1", data=1, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer2", data=2, labelLeft="#2", active=false,
							guiState.buttons!({ data=2, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size2", data=2, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer3", data=3, labelLeft="#3", active=false,
							guiState.buttons!({ data=3, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size3", data=3, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer4", data=4, labelLeft="#4", active=false,
							guiState.buttons!({ data=4, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size4", data=4, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer5", data=5, labelLeft="#5", active=false,
							guiState.buttons!({ data=5, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size5", data=5, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer6", data=6, labelLeft="#6", active=false,
							guiState.buttons!({ data=6, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size6", data=6, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer7", data=7, labelLeft="#7", active=false,
							guiState.buttons!({ data=7, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size7", data=7, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.hbox!({ name="sizeContainer8", data=8, labelLeft="#8", active=false,
							guiState.buttons!({ data=8, buttons={{name="sizeRemove",image="iconDelete",tooltip="Remove size"},{name="sizeAdd",image="iconAdd",tooltip="Add/duplicate size"}} }),
							guiState.slider!({ name="size8", data=8, min=0, max=8, readout="%.2f", weight=1 }),
						}),
						guiState.slider!({ labelLeft="variation", min=0, max=1, readoutMulti=100, readout="%d%%" }),
					}),

					guiState.separator!({ thick=false }),

					guiState.section!({ label="Color",
						guiState.hbox!({
							guiState.vbox!({ name="colors", weight=1,
								guiState.hbox!({ name="colorContainer1", labelLeft="#1",
									guiState.buttons!({ data=1, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=1, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color1", data=1, weight=1, linkMultiDrag={"color2","color3","color4","color5","color6","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer2", labelLeft="#2", active=false,
									guiState.buttons!({ data=2, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=2, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color2", data=2, weight=1, linkMultiDrag={"color1","color3","color4","color5","color6","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer3", labelLeft="#3", active=false,
									guiState.buttons!({ data=3, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=3, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color3", data=3, weight=1, linkMultiDrag={"color1","color2","color4","color5","color6","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer4", labelLeft="#4", active=false,
									guiState.buttons!({ data=4, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=4, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color4", data=4, weight=1, linkMultiDrag={"color1","color2","color3","color5","color6","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer5", labelLeft="#5", active=false,
									guiState.buttons!({ data=5, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=5, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color5", data=5, weight=1, linkMultiDrag={"color1","color2","color3","color4","color6","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer6", labelLeft="#6", active=false,
									guiState.buttons!({ data=6, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=6, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color6", data=6, weight=1, linkMultiDrag={"color1","color2","color3","color4","color5","color7","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer7", labelLeft="#7", active=false,
									guiState.buttons!({ data=7, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=7, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color7", data=7, weight=1, linkMultiDrag={"color1","color2","color3","color4","color5","color6","color8"} }),
								}),
								guiState.hbox!({ name="colorContainer8", labelLeft="#8", active=false,
									guiState.buttons!({ data=8, buttons={{name="colorRemove",image="iconDelete",tooltip="Remove color"},{name="colorMove",image="iconMoveV",tooltip="Move color (drag)",draggable=true}}, vertical=true }),
									guiState.buttons!({ data=8, buttons={{name="colorAdd",image="iconAdd",tooltip="Add/duplicate color"}}, vertical=true }),
									guiState.color!({ name="color8", data=8, weight=1, linkMultiDrag={"color1","color2","color3","color4","color5","color6","color7"} }),
								}),
							}),
							guiState.colorPreview!({ name="colorPreview", linkColors={"color1","color2","color3","color4","color5","color6","color7","color8"} }),
						}),
						guiState.radio!({ name="blendMode", labelLeft="blend mode",
							buttons = {
								{value=LG.BlendMode.ALPHA,    label="alpha"},
								{value=LG.BlendMode.ADD,      label="add"},
								{value=LG.BlendMode.SUBTRACT, label="subtract"},
								{value=LG.BlendMode.SCREEN,   label="screen"},
							},
						}),
					}),
				}),
			}),
		}),
	}
}

export setupGuiCallbacks :: () {
	guiState.onRefresh.projects = (tabs:gui.Tabs) {
		tabs.buttons = {}

		for openProjects {
			insert(tabs.buttons, cast(gui.Button){ label=it.displayedName, draggable=true })
		}
		insert(tabs.buttons, cast(gui.Button){ image="iconAdd", tooltip="New project" })

		tabs.index = currentProjectIndex
	}
	guiState.onAction.projects = (tabs:gui.Tabs, i:int) {
		if i < #tabs.buttons {
			setCurrentProject(i)
			return
		}

		local project = addNewProject()

		insert(tabs.buttons, #tabs.buttons, cast(gui.Button){ label=project.displayedName, draggable=true })
		guiState.layoutNeedsUpdate = true

		setCurrentProject(#openProjects)
	}
	guiState.onClose.projects = (tabs:gui.Tabs, i:int) {
		if i == #tabs.buttons  return

		local isCurrent = (i == currentProjectIndex)

		-- @UX: Confirm closing project if there are changes.
		remove(openProjects, i)

		if openProjects[1] == NULL
			addNewProject()
		elseif i < currentProjectIndex
			currentProjectIndex -= 1
		else
			currentProjectIndex = math.min(currentProjectIndex, #openProjects)

		gui.refreshRecursively(guiState, "projects")
		if isCurrent  setCurrentProject(currentProjectIndex, force=true)
	}
	guiState.onDrag.projects = (tabs:gui.Tabs, i:int, mx,my:int) {
		local targetIndex = math.clamp(math.floor(1 + (mx - tabs.layoutX) / tabs.buttonWidth), 1, #openProjects)
		if targetIndex == i  return

		local isCurrent = (i == currentProjectIndex)

		local _, project = remove(openProjects, i)
		local _, button  = remove(tabs.buttons, i)
		insert(openProjects, targetIndex, project)
		insert(tabs.buttons, targetIndex, button)

		if isCurrent
			currentProjectIndex = targetIndex
		elseif i > currentProjectIndex and targetIndex <= currentProjectIndex
			currentProjectIndex += 1
		elseif i < currentProjectIndex and targetIndex >= currentProjectIndex
			currentProjectIndex -= 1

		tabs.index = currentProjectIndex

		guiState.activeSubid  = targetIndex
		guiState.hoveredSubid = targetIndex
	}

	guiState.onRefresh.saveOpenBar = (buttons:gui.Buttons) {
		buttons.buttons[4].label = showProjectSettings ? "hide settings" : "show settings"
		gui.setActive(guiState, "projectSettings", showProjectSettings)
	}
	guiState.onAction.saveOpenBar = (buttons:gui.Buttons, i:int) {
		if i == {
			case 1:
				-- @Incomplete: save

			case 2:
				-- @Incomplete: save as...

			case 3:
				-- @Incomplete: open...

			case 4:
				showProjectSettings = not showProjectSettings
				buttons.buttons[4].label = showProjectSettings ? "hide settings" : "show settings"
				gui.setActive(guiState, "projectSettings", showProjectSettings)
		}
	}

	guiState.onRefresh.pixelateWorld = (checkbox:gui.Checkbox) {
		local project    = openProjects[currentProjectIndex]
		checkbox.checked = project.pixelateWorld
	}
	guiState.onAction.pixelateWorld = (checkbox:gui.Checkbox, i:int) {
		local project            = openProjects[currentProjectIndex]
		project.pixelateWorld    = checkbox.checked
		scheduleRecreateCanvases = true

		if project.pixelateWorld and project.zoomLevel < -1 {
			project.zoomLevel  = -1
			project.zoomSource = project.zoom
			project.zoomTarget = 2^project.zoomLevel
		}
	}
	guiState.onRefresh.pixelateTextures = (checkbox:gui.Checkbox) {
		local project    = openProjects[currentProjectIndex]
		checkbox.checked = project.pixelateTextures
	}
	guiState.onAction.pixelateTextures = (checkbox:gui.Checkbox, i:int) {
		local project            = openProjects[currentProjectIndex]
		project.pixelateTextures    = checkbox.checked
		scheduleRecreateCanvases = true

		if project.pixelateTextures and project.zoomLevel < -1 {
			project.zoomLevel  = -1
			project.zoomSource = project.zoom
			project.zoomTarget = 2^project.zoomLevel
		}
	}

	guiState.onRefresh.bgColor = (colorEl:gui.Color) {
		local project    = openProjects[currentProjectIndex]
		colorEl.color[1] = project.bgColorH
		colorEl.color[2] = project.bgColorS
		colorEl.color[3] = project.bgColorV
	}
	guiState.onAction.bgColor = (colorEl:gui.Color, i:int) {
		local project    = openProjects[currentProjectIndex]
		project.bgColorH = colorEl.color[1]
		project.bgColorS = colorEl.color[2]
		project.bgColorV = colorEl.color[3]
	}

	guiState.onRefresh.emitterMovement = (radio:gui.Radio) {
		local project  = openProjects[currentProjectIndex]
		local found, i = indexWith(radio.buttons, "value", project.movementPreset)
		assert(found)
		radio.index = i
	}
	guiState.onAction.emitterMovement = (radio:gui.Radio, i:int) {
		local project          = openProjects[currentProjectIndex]
		project.movementPreset = cast(Movement) radio.buttons[i].value
	}
	guiState.onRefresh.emitterMovementSx = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		slider.value  = project.movementScaleX
	}
	guiState.onAction.emitterMovementSx = (slider:gui.Slider, i:int) {
		local project          = openProjects[currentProjectIndex]
		project.movementScaleX = slider.value
	}
	guiState.onRefresh.emitterMovementSy = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		slider.value  = project.movementScaleY
	}
	guiState.onAction.emitterMovementSy = (slider:gui.Slider, i:int) {
		local project          = openProjects[currentProjectIndex]
		project.movementScaleY = slider.value
	}
	guiState.onRefresh.emitterMovementSpeed = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		slider.value  = project.movementSpeed
	}
	guiState.onAction.emitterMovementSpeed = (slider:gui.Slider, i:int) {
		local project         = openProjects[currentProjectIndex]
		project.movementSpeed = slider.value
	}

	guiState.onRefresh.systems = (tabs:gui.Tabs) {
		local project = openProjects[currentProjectIndex]
		tabs.buttons  = {}

		for project.systems {
			insert(tabs.buttons, cast(gui.Button){ system=it, draggable=true })
		}
		insert(tabs.buttons, cast(gui.Button){ image="iconAdd", tooltip="New particle system" })

		tabs.index = project.systemIndex
	}
	guiState.onAction.systems = (tabs:gui.Tabs, i:int) {
		local project = openProjects[currentProjectIndex]

		if i < #tabs.buttons {
			setCurrentSystem(i)
			return
		}

		addNewSystem(project)
		gui.refreshRecursively(guiState, "systems")
		setCurrentSystem(#project.systems)
	}
	guiState.onOption.systems = (tabs:gui.Tabs, i:int) {
		if i == #tabs.buttons  return

		local project              = openProjects[currentProjectIndex]
		project.systems[i].visible = not project.systems[i].visible
	}
	guiState.onClose.systems = (tabs:gui.Tabs, i:int) {
		if i == #tabs.buttons  return

		local project   = openProjects[currentProjectIndex]
		local isCurrent = i == project.systemIndex

		-- @UX: Confirm removal of system.
		remove(project.systems, i)

		if project.systems[1] == NULL
			addNewSystem(project)
		elseif i < project.systemIndex
			project.systemIndex -= 1
		else
			project.systemIndex = math.min(project.systemIndex, #project.systems)

		gui.refreshRecursively(guiState, "systems")
		if isCurrent  setCurrentSystem(project.systemIndex, force=true)
	}
	guiState.onDrag.systems = (tabs:gui.Tabs, i:int, mx,my:int) {
		local project     = openProjects[currentProjectIndex]
		local targetIndex = math.clamp(math.floor(1 + (mx - tabs.layoutX) / tabs.buttonWidth), 1, #project.systems)
		if targetIndex == i  return

		local isCurrent = (i == project.systemIndex)

		local _, system = remove(project.systems, i)
		local _, button = remove(tabs.buttons, i)
		insert(project.systems, targetIndex, system)
		insert(tabs.buttons,    targetIndex, button)

		if isCurrent
			project.systemIndex = targetIndex
		elseif i > project.systemIndex and targetIndex <= project.systemIndex
			project.systemIndex += 1
		elseif i < project.systemIndex and targetIndex >= project.systemIndex
			project.systemIndex -= 1

		tabs.index = project.systemIndex

		guiState.activeSubid  = targetIndex
		guiState.hoveredSubid = targetIndex
	}

	guiState.onRefresh.texture = (radio:gui.Radio) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		radio.buttons = {}

		for particleImageNames {
			insert(radio.buttons, cast(gui.Button){ value=it, tooltip=it, image=it })
		}

		local found, i = indexOf(particleImageNames, system.textureName)
		assert(found)
		radio.index = i
	}
	guiState.onAction.texture = (radio:gui.Radio, i:int) {
		local project      = openProjects[currentProjectIndex]
		local system       = project.systems[project.systemIndex]
		system.textureName = cast(string) radio.buttons[i].value
		system.particles.setTexture!(particleImages[system.textureName]) -- @Incomplete: Update offset if system.useCustomOffset is set.
	}

	guiState.onRefresh.insertMode = (radio:gui.Radio) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local found, i = indexWith(radio.buttons, "value", system.particles.getInsertMode!())
		assert(found)
		radio.index = i
	}
	guiState.onAction.insertMode = (radio:gui.Radio, i:int) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		system.particles.setInsertMode!(cast(LG.ParticleInsertMode) radio.buttons[i].value)
	}

	guiState.onRefresh.emitterLifetime = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		slider.value  = math.max(system.particles.getEmitterLifetime!(), 0)
	}
	guiState.onAction.emitterLifetime = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		system.particles.setEmitterLifetime!(slider.value > 0 ? slider.value : -1.0)
		if slider.value <= 0  system.particles.start!()
	}
	guiState.onRefresh.particleLifetimeMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local min, max = system.particles.getParticleLifetime!()
		slider.value   = min
	}
	guiState.onAction.particleLifetimeMin = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local min, max = system.particles.getParticleLifetime!()
		system.particles.setParticleLifetime!(slider.value, max)
	}
	guiState.onRefresh.particleLifetimeMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local min, max = system.particles.getParticleLifetime!()
		slider.value   = max
	}
	guiState.onAction.particleLifetimeMax = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local min, max = system.particles.getParticleLifetime!()
		system.particles.setParticleLifetime!(min, slider.value)
	}

	guiState.onRefresh.emissionRate = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		slider.value  = system.particles.getEmissionRate!()
	}
	guiState.onAction.emissionRate = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		system.particles.setEmissionRate!(slider.value)
	}

	guiState.onRefresh.areaDistribution = (radio:gui.Radio) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local found, i = indexWith(radio.buttons, "value", (ps.getEmissionArea!()))
		assert(found)
		radio.index = i
		gui.setActive(guiState, "areaParams", i > 1)
	}
	guiState.onAction.areaDistribution = (radio:gui.Radio, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		distribution  = cast(LG.AreaSpreadDistribution) radio.buttons[i].value
		ps.setEmissionArea!(distribution, dx,dy, angle, relative)
		gui.setActive(guiState, "areaParams", i > 1)
		gui.refreshRecursively(guiState, "areaParams")
	}
	guiState.onRefresh.areaAngle = (direction:gui.Direction) {
		local project   = openProjects[currentProjectIndex]
		local ps        = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle = ps.getEmissionArea!()
		direction.angle = angle
	}
	guiState.onAction.areaAngle = (direction:gui.Direction, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		ps.setEmissionArea!(distribution, dx,dy, direction.angle, relative)
	}
	guiState.onRefresh.areaDx = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx = ps.getEmissionArea!()
		slider.value  = dx
	}
	guiState.onAction.areaDx = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		ps.setEmissionArea!(distribution, slider.value,dy, angle, relative)
	}
	guiState.onRefresh.areaDy = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy = ps.getEmissionArea!()
		slider.value  = dy
	}
	guiState.onAction.areaDy = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		ps.setEmissionArea!(distribution, dx,slider.value, angle, relative)
	}
	guiState.onRefresh.areaRelative = (checkbox:gui.Checkbox) {
		local project    = openProjects[currentProjectIndex]
		local ps         = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		checkbox.checked = relative
	}
	guiState.onAction.areaRelative = (checkbox:gui.Checkbox, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local distribution, dx,dy, angle, relative = ps.getEmissionArea!()
		ps.setEmissionArea!(distribution, dx,dy, angle, checkbox.checked)
	}

	guiState.onRefresh.direction = (direction:gui.Direction) {
		local project   = openProjects[currentProjectIndex]
		local ps        = project.systems[project.systemIndex].particles
		direction.angle = ps.getDirection!()
	}
	guiState.onAction.direction = (direction:gui.Direction, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		ps.setDirection!(direction.angle)
	}
	guiState.onRefresh.directionSpread = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		slider.value  = ps.getSpread!()
	}
	guiState.onAction.directionSpread = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		ps.setSpread!(slider.value)
	}

	guiState.onRefresh.speedMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpeed!()
		slider.value   = min
	}
	guiState.onAction.speedMin = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpeed!()
		ps.setSpeed!(slider.value, max)
	}
	guiState.onRefresh.speedMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpeed!()
		slider.value   = max
	}
	guiState.onAction.speedMax = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpeed!()
		ps.setSpeed!(min, slider.value)
	}

	guiState.onRefresh.accLinearXmin = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		slider.value  = xmin
	}
	guiState.onAction.accLinearXmin = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		ps.setLinearAcceleration!(slider.value,ymin, xmax,ymax)
	}
	guiState.onRefresh.accLinearXmax = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		slider.value  = xmax
	}
	guiState.onAction.accLinearXmax = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		ps.setLinearAcceleration!(xmin,ymin, slider.value,ymax)
	}
	guiState.onRefresh.accLinearYmin = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		slider.value  = ymin
	}
	guiState.onAction.accLinearYmin = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		ps.setLinearAcceleration!(xmin,slider.value, xmax,ymax)
	}
	guiState.onRefresh.accLinearYmax = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		slider.value  = ymax
	}
	guiState.onAction.accLinearYmax = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local xmin,ymin, xmax,ymax = ps.getLinearAcceleration!()
		ps.setLinearAcceleration!(xmin,ymin, xmax,slider.value)
	}

	guiState.onRefresh.radialAccelerationMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getRadialAcceleration!()
		slider.value   = min
	}
	guiState.onAction.radialAccelerationMin = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getRadialAcceleration!()
		ps.setRadialAcceleration!(slider.value, max)
	}
	guiState.onRefresh.radialAccelerationMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getRadialAcceleration!()
		slider.value   = max
	}
	guiState.onAction.radialAccelerationMax = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getRadialAcceleration!()
		ps.setRadialAcceleration!(min, slider.value)
	}

	guiState.onRefresh.tangentialAccelerationMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getTangentialAcceleration!()
		slider.value   = min
	}
	guiState.onAction.tangentialAccelerationMin = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getTangentialAcceleration!()
		ps.setTangentialAcceleration!(slider.value, max)
	}
	guiState.onRefresh.tangentialAccelerationMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getTangentialAcceleration!()
		slider.value   = max
	}
	guiState.onAction.tangentialAccelerationMax = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getTangentialAcceleration!()
		ps.setTangentialAcceleration!(min, slider.value)
	}

	guiState.onRefresh.linearDampingMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getLinearDamping!()
		slider.value   = min
	}
	guiState.onAction.linearDampingMin = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getLinearDamping!()
		ps.setLinearDamping!(slider.value, max)
	}
	guiState.onRefresh.linearDampingMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getLinearDamping!()
		slider.value   = max
	}
	guiState.onAction.linearDampingMax = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local min, max = ps.getLinearDamping!()
		ps.setLinearDamping!(min, slider.value)
	}

	guiState.onRefresh.rotationMin = (direction:gui.Direction) {
		local project   = openProjects[currentProjectIndex]
		local ps        = project.systems[project.systemIndex].particles
		local min, max  = ps.getRotation!()
		direction.angle = min
	}
	guiState.onAction.rotationMin = (direction:gui.Direction, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getRotation!()
		ps.setRotation!(direction.angle, max)
	}
	guiState.onRefresh.rotationMax = (direction:gui.Direction) {
		local project   = openProjects[currentProjectIndex]
		local ps        = project.systems[project.systemIndex].particles
		local min, max  = ps.getRotation!()
		direction.angle = max
	}
	guiState.onAction.rotationMax = (direction:gui.Direction, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getRotation!()
		ps.setRotation!(min, direction.angle)
	}
	guiState.onRefresh.rotationRelative = (checkbox:gui.Checkbox) {
		local project    = openProjects[currentProjectIndex]
		local ps         = project.systems[project.systemIndex].particles
		checkbox.checked = ps.hasRelativeRotation!()
	}
	guiState.onAction.rotationRelative = (checkbox:gui.Checkbox, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		ps.setRelativeRotation!(checkbox.checked)
	}

	guiState.onRefresh.spinMin = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpin!()
		slider.value   = min
	}
	guiState.onAction.spinMin = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpin!()
		ps.setSpin!(slider.value, max)
	}
	guiState.onRefresh.spinMax = (slider:gui.Slider) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpin!()
		slider.value   = max
	}
	guiState.onAction.spinMax = (slider:gui.Slider, i:int) {
		local project  = openProjects[currentProjectIndex]
		local ps       = project.systems[project.systemIndex].particles
		local min, max = ps.getSpin!()
		ps.setSpin!(min, slider.value)
	}
	guiState.onRefresh.spinVariation = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		slider.value  = ps.getSpinVariation!()
	}
	guiState.onAction.spinVariation = (slider:gui.Slider, i:int) {
		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		ps.setSpinVariation!(slider.value)
	}

	guiState.onRefresh.sizes = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		local sizes   = {system.particles.getSizesAsVararg!()}
		for 1, 8 {
			gui.setActive(guiState, format("sizeContainer%d", it), (sizes[it] ~= NULL))
		}
	}
	guiState.onAction.sizeAdd = (buttons:gui.Buttons, i:int) {
		i = cast(int) buttons.data

		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local sizes   = {ps.getSizesAsVararg!()}

		if sizes[8] ~= NULL {
			setErrorText("Max 8 sizes")
			return
		}

		insert(sizes, i, sizes[i])
		ps.setSizes!(sizes)

		for j = i, #sizes {
			local name = format("sizeContainer%d", j)
			gui.setActive(guiState, name, true)
			gui.refreshRecursively(guiState, name)
		}
	}
	guiState.onAction.sizeRemove = (buttons:gui.Buttons, i:int) {
		i = cast(int) buttons.data

		local project = openProjects[currentProjectIndex]
		local ps      = project.systems[project.systemIndex].particles
		local sizes   = {ps.getSizesAsVararg!()}

		if sizes[2] == NULL {
			sizes[1] = 1
		} else {
			gui.setActive(guiState, format("sizeContainer%d", #sizes), false)
			remove(sizes, i)
		}

		ps.setSizes!(sizes)

		for j = i, #sizes {
			gui.refreshRecursively(guiState, format("sizeContainer%d", j))
		}
	}
	for i = 1, 8 {
		guiState.onRefresh[format("size%d", i)] = (slider:gui.Slider) {
			local project = openProjects[currentProjectIndex]
			local system  = project.systems[project.systemIndex]
			local sizes   = {system.particles.getSizesAsVararg!()}
			slider.value  = sizes[cast(int)slider.data]
		}
		guiState.onAction[format("size%d", i)] = (slider:gui.Slider, i:int) {
			local project = openProjects[currentProjectIndex]
			local system  = project.systems[project.systemIndex]
			local sizes   = {system.particles.getSizesAsVararg!()}
			sizes[cast(int)slider.data] = slider.value
			system.particles.setSizes!(sizes)
		}
	}

	guiState.onRefresh.colors = (slider:gui.Slider) {
		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		local colors  = system.colors
		for 1, 8 {
			gui.setActive(guiState, format("colorContainer%d", it), (colors[it*4] ~= NULL))
		}
	}
	guiState.onAction.colorAdd = (buttons:gui.Buttons, i:int) {
		i = cast(int) buttons.data

		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		local colors  = system.colors

		if colors[8*4] ~= NULL {
			setErrorText("Max 8 colors")
			return
		}

		local i1 = i*4 - 3
		local h  = colors[i1  ]
		local s  = colors[i1+1]
		local v  = colors[i1+2]
		local a  = colors[i1+3]

		insert(colors, i1,   h)
		insert(colors, i1+1, s)
		insert(colors, i1+2, v)
		insert(colors, i1+3, a)

		updateParticleColors(system.particles, colors)

		for j = i, #colors//4 {
			local name = format("colorContainer%d", j)
			gui.setActive(guiState, name, true)
			gui.refreshRecursively(guiState, name)
		}
	}
	guiState.onAction.colorRemove = (buttons:gui.Buttons, i:int) {
		i = cast(int) buttons.data

		local project = openProjects[currentProjectIndex]
		local system  = project.systems[project.systemIndex]
		local colors  = system.colors

		if colors[4+1] == NULL {
			colors[1] = 0
			colors[2] = 0
			colors[3] = 1
			colors[4] = 1

		} else {
			gui.setActive(guiState, format("colorContainer%d", #colors//4), false)

			local i1 = i*4 - 3
			remove(colors, i1+3)
			remove(colors, i1+2)
			remove(colors, i1+1)
			remove(colors, i1  )
		}

		updateParticleColors(system.particles, colors)

		for j = i, #colors//4 {
			gui.refreshRecursively(guiState, format("colorContainer%d", j))
		}
	}
	guiState.onDrag.colorMove = (buttons:gui.Buttons, i:int, mx,my:int) {
		i = cast(int) buttons.data

		local colorDragContainer = gui.getElement(guiState, "colors", gui.Vbox)

		local project     = openProjects[currentProjectIndex]
		local system      = project.systems[project.systemIndex]
		local colors      = system.colors
		local targetIndex = math.clamp(math.floor(1 + (my - (colorDragContainer.layoutY + gui.getScrollOffset(colorDragContainer))) / colorDragContainer[1].layoutHeight), 1, #colors//4)
		if targetIndex == i  return

		local dir = math.getSign(targetIndex-i)

		for j = i, targetIndex-dir, dir {
			colors[j*4-3], colors[(j+dir)*4-3] = colors[(j+dir)*4-3], colors[j*4-3]
			colors[j*4-2], colors[(j+dir)*4-2] = colors[(j+dir)*4-2], colors[j*4-2]
			colors[j*4-1], colors[(j+dir)*4-1] = colors[(j+dir)*4-1], colors[j*4-1]
			colors[j*4  ], colors[(j+dir)*4  ] = colors[(j+dir)*4  ], colors[j*4  ]
		}

		updateParticleColors(system.particles, colors)

		guiState.activeId  = colorDragContainer[targetIndex][1].id -- @Volatile
		guiState.hoveredId = guiState.activeId

		gui.refreshRecursively(guiState, colorDragContainer)
	}
	for i = 1, 8 {
		guiState.onRefresh[format("color%d", i)] = (colorEl:gui.Color) {
			local project    = openProjects[currentProjectIndex]
			local system     = project.systems[project.systemIndex]
			local colors     = system.colors
			local i1         = (4 * cast(int) colorEl.data) - 3
			colorEl.color[1] = colors[i1+0]
			colorEl.color[2] = colors[i1+1]
			colorEl.color[3] = colors[i1+2]
			colorEl.color[4] = colors[i1+3]
		}
		guiState.onAction[format("color%d", i)] = (colorEl:gui.Color, i:int) {
			local project  = openProjects[currentProjectIndex]
			local system   = project.systems[project.systemIndex]
			local colors   = system.colors
			local i1       = (4 * cast(int) colorEl.data) - 3
			colors[i1+i-1] = colorEl.color[i]
			updateParticleColors(system.particles, colors)
		}
	}

	guiState.onRefresh.colorPreview = (preview:gui.ColorPreview) {
		local project     = openProjects[currentProjectIndex]
		local system      = project.systems[project.systemIndex]
		preview.blendMode = system.blendMode
	}

	guiState.onRefresh.blendMode = (radio:gui.Radio) {
		local project  = openProjects[currentProjectIndex]
		local system   = project.systems[project.systemIndex]
		local found, i = indexWith(radio.buttons, "value", system.blendMode)
		assert(found)
		radio.index = i
	}
	guiState.onAction.blendMode = (radio:gui.Radio, i:int) {
		local project    = openProjects[currentProjectIndex]
		local system     = project.systems[project.systemIndex]
		local blendMode  = cast(LG.BlendMode) radio.buttons[i].value
		system.blendMode = blendMode
		gui.getElement(guiState, "colorPreview", gui.ColorPreview).blendMode = blendMode
	}
}
