--[[============================================================
--=
--=  Build script
--=
--=-------------------------------------------------------------
--=
--=  Hot Particles - a particle editor for LÖVE
--=  by Marcus 'ReFreezed' Thunström
--=
--============================================================]]

!import "basic"
!import "compiler"
!import "string"
!import "utils"

local io  :: !import "io"
local lfs :: !import "lfs"
local os  :: !import "os"

!run {
	local options      = getBuildOptions()
	options.outputType = BuildOutputType.NONE
	setBuildOptions(options)

	local dev = indexOf(getProgramArguments(), "--dev")

	-- [[
	if not dev  print("Compiling...")
	compile("src/main.gloa")
	compile("src/conf.gloa")
	--]]

	if not dev  doRelease()
}

local Values :: struct { !key:string, !value:string }

local dirLove      = ""
local path7z       = ""
local pathIconv    = ""
local pathItchio   = ""
local pathLuac     = ""
local pathMagick   = ""
local pathPngCrush = ""
local pathRh       = ""

local doRelease :: () {
	print("Doing release stuff...")

	for line in io.eachLine"local/build.txt"  if line {
		local ok, k, v = matchPattern(line, "^([%w_]+)%s*=%s*(.*)$")
		assert(ok, line)
		if cast(string) k == {
			case "dirLove":      dirLove      = cast(string) v
			case "path7z":       path7z       = cast(string) v
			case "pathIconv":    pathIconv    = cast(string) v
			case "pathItchio":   pathItchio   = cast(string) v
			case "pathLuac":     pathLuac     = cast(string) v
			case "pathMagick":   pathMagick   = cast(string) v
			case "pathPngCrush": pathPngCrush = cast(string) v
			case "pathRh":       pathRh       = cast(string) v
			case:                error(cast(string) k)
		}
	}

	assert(dirLove      ~= "", "dirLove")
	assert(path7z       ~= "", "path7z")
	assert(pathIconv    ~= "", "pathIconv")
	assert(pathItchio   ~= "", "pathItchio")
	assert(pathLuac     ~= "", "pathLuac")
	assert(pathMagick   ~= "", "pathMagick")
	assert(pathPngCrush ~= "", "pathPngCrush")
	assert(pathRh       ~= "", "pathRh")

	local outputDir = "output/win64/Hot Particles"

	local values: Values = {
		exeName         = "HotParticles",
		exePath         = outputDir.."/HotParticles.exe",
		iconPath        = "temp/appIcon.ico",

		appName         = "Hot Particles",
		appNameShort    = "Hot Particles", -- Should be less than 16 characters long.
		appNameInternal = "Hot Particles",

		appVersion      = "1.0.0",
		appVersionMajor = "1",
		appVersionMinor = "0",
		appVersionPatch = "0",
		appIdentifier   = "com.refreezed.hotparticles",

		companyName     = "",
		copyright       = os.getDate"Copyright %Y Marcus 'ReFreezed' Thunström",

		lovePath        = "temp/app.love",
		loveExeDir      = dirLove,
		loveExePath     = dirLove.."/love.exe",
		versionInfoPath = "temp/appInfo.res",
	}

	lfs.makeDirectory("temp")

	do {
		-- Create missing icon sizes.
		for {--[[16,]]24,32,48,64,128--[[,256]]} {
			executeRequired(pathMagick, {
				"gfx/appIcon256.png",
				"-resize", format("%dx%d", it, it),
				format("gfx/appIcon%d.png", it),
			})
		}

		-- Crush icon PNGs.
		-- @Incomplete: Crush all PNGs for release version!
		for {16,24,32,48,64,128,256} {
			executeRequired(pathPngCrush, {
				"-ow",          -- Overwrite (must be first).
				"-rem", "alla", -- Remove unnecessary chunks.
				"-reduce",      -- Lossless color reduction.
				"-warn",        -- No spam!
				format("gfx/appIcon%d.png", it),
			})
		}

		-- Create .ico.
		local ok, err = io.writeEntireFile("temp/icons.txt", "\z
			gfx/appIcon16.png\n\z
			gfx/appIcon24.png\n\z
			gfx/appIcon32.png\n\z
			gfx/appIcon48.png\n\z
			gfx/appIcon64.png\n\z
			gfx/appIcon128.png\n\z
			gfx/appIcon256.png\n\z
		")
		assert(ok, err)

		executeRequired(pathMagick, {
			"@temp/icons.txt",
			values.iconPath,
		})
	}

	-- Make love. <3
	local filesToLove = {
		"conf.lua",
		"main.lua",
	}

	for dir: {"gfx","src"} {
		lfs.traverseDirectory(dir, [filesToLove] (path:string) -> lfs.Traverse {
			if lfs.isFile(path) {
				local DO_PRINT :: 1==1
				local _, ext = matchPattern(path, "[^.]+$")

				if ext == "psd" or ext == "gloa" {
					!if DO_PRINT  print("- "..path)
				} else {
					!if DO_PRINT  print("+ "..path)
					insert(filesToLove, path)
				}

			-- } elseif path == ? {
			-- 	return lfs.Traverse.IGNORE
			}

			return lfs.Traverse.CONTINUE
		})
	}

	io.remove(values.lovePath)
	zip(values.lovePath, filesToLove)

	-- Compile resource file.
	do {
		local ok, contents, err = io.readEntireFile("misc/appInfoTemplate.rc") ; assert(ok, err) -- UTF-16 LE BOM encoded.
		contents                = templateToStringUtf16(contents, values)
		io.writeEntireFile("temp/appInfo.rc", contents)

		executeRequired(pathRh, {
			"-open",   "temp/appInfo.rc",
			"-save",   values.versionInfoPath,
			"-action", "compile",
			"-log",    "local/rh.log", -- @Temp
			-- "-log",    "CONSOLE", -- Why doesn't this work? (And is it just in Sublime?)
		})
	}

	do {
		local TEMPLATE_UPDATE_EXE :: '\z
			[FILENAMES]\n\z
			Exe    = "${loveExePath}"\n\z
			SaveAs = "${exePath}"\n\z
			Log    = CONSOLE\n\z

			[COMMANDS]\n\z
			-delete ICONGROUP,,\n\z
			-delete VERSIONINFO,,\n\z
			-add "${versionInfoPath}", ,,\n\z
			-add "${iconPath}", ICONGROUP,MAINICON,0\n\z
		'

		local contents = templateToString(TEMPLATE_UPDATE_EXE, values, toWindowsPath)
		io.writeEntireFile("temp/updateExe.rhs", contents)
	}

	-- Create base for install directory using robocopy.
	-- Note: Because of robocopy's complex return codes we just trust that it's always successful.
	-- https://blogs.technet.microsoft.com/deploymentguys/2008/06/16/robocopy-exit-codes/
	local PATH_RC_LOG :: "local/robocopy.log"
	io.remove(PATH_RC_LOG)
	os.execute("ROBOCOPY", {values.loveExeDir, outputDir, "/NOCOPY", "/PURGE", "/E", "/LOG+:"..PATH_RC_LOG})
	os.execute("ROBOCOPY", {values.loveExeDir, outputDir, "*.dll",             "/E", "/LOG+:"..PATH_RC_LOG})

	-- Create exe.
	do {
		executeRequired(pathRh, {
			"-script", "temp/updateExe.rhs",
		})

		local  ok, contentsLoveExe, err = io.readEntireFile(values.exePath)  ; assert(ok, err)
		local ^ok, contentsLove,   ^err = io.readEntireFile(values.lovePath) ; assert(ok, err)

		local ^ok, file, ^err = io.openForWriting(values.exePath) ; assert(ok, err)
		io.write(file, contentsLoveExe)
		io.write(file, contentsLove)
		io.close(file)
	}

	-- Add remaining files.
	do {
		local ok, err = io.copy("README.txt", outputDir.."/_README.txt")
		assert(ok, err)
	}

	-- Zip for distribution!
	zip("output/HotParticles_"..values.appVersion.."_win64.zip", "./"..outputDir)

	-- os.exit(1) -- DEBUG
}

local executeRequired :: (command:string) {
	assert((os.execute(command) == 0), command)
}
local executeRequired :: (program:string, arguments:[]string) {
	local ok, err, code, cmd = os.execute(program, arguments)
	assert(ok, cmd)
	if code ~= 0  errorf("%d / %s", code, cmd)
}

local templateToString :: (s:string, values:Values, formatter:(s:string)->string=NULL) -> string {
	return (replacePatternWithFunction(s, "${([%w]+)}", [values, formatter] (k:string) -> string|none {
		local v = values[k]
		if v         == NULL  errorf("No value '%s'.", k)
		if formatter ~= NULL  v = formatter(v)
		return v
	}))
}
local templateToStringUtf16 :: (s:string, values:Values, formatter:(s:string)->string=NULL) -> string {
	return (replacePatternWithFunction(s, "%z$%z{([%w%z]+)%z}", [values, formatter] (k:string) -> string|none {
		k       = utf16ToUtf8(k)
		local v = values[k]
		if v         == NULL  errorf("No value '%s'.", k)
		if formatter ~= NULL  v = formatter(v)
		return utf8ToUtf16(v)
	}))
}

local utf16ToUtf8 :: (s:string) -> string {
	-- @Hack @Hack @Hack!!!
	s = replacePattern(s, "%z", "")
	s = replace(s, "Å", "\xC5")
	s = replace(s, "Ä", "\xC4")
	s = replace(s, "Ö", "\xD6")
	s = replace(s, "å", "\xE5")
	s = replace(s, "ä", "\xE4")
	s = replace(s, "ö", "\xF6")
	return s
}
local utf8ToUtf16 :: (s:string) -> string {
	-- @Hack @Hack @Hack!!!
	s = replace(s, "Å", "\xC5")
	s = replace(s, "Ä", "\xC4")
	s = replace(s, "Ö", "\xD6")
	s = replace(s, "å", "\xE5")
	s = replace(s, "ä", "\xE4")
	s = replace(s, "ö", "\xF6")
	s = replacePatternWithPattern(s, ".", "\0%0")
	return s
}

local toWindowsPath :: (s:string) -> string {
	return (replace(s, "/", "\\"))
}

-- Note: CWD matter!
-- Note: To strip the path to folderToZip inside the resulting zip file, prepend "./".
local zip :: (zipFilePath:string, folderToZip:string, append=false) {
	if not append and lfs.isFile(zipFilePath) {
		local ok, err = io.remove(zipFilePath)
		assert(ok, err)
	}
	executeRequired(path7z, {"a", "-tzip", zipFilePath, folderToZip})
}
local zip :: (zipFilePath:string, pathsToZip:[]string, append=false) {
	if not append and lfs.isFile(zipFilePath) {
		local ok, err = io.remove(zipFilePath)
		assert(ok, err)
	}

	local PATH_INCLUDE_LIST :: "temp/zipIncludes.txt"

	local ok, err = io.writeEntireTextFile(PATH_INCLUDE_LIST, pathsToZip, dataSuffix="\n")
	assert(ok, err)

	executeRequired(path7z, {"a", "-tzip", zipFilePath, "@"..PATH_INCLUDE_LIST})
}
